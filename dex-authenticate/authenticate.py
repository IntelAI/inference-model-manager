import requests

from urllib.parse import urljoin, urlparse, parse_qs
from bs4 import BeautifulSoup
from requests_oauthlib import OAuth2Session

username = 'janedoe@example.com'
password = 'foo'
redirect_uri = 'http://127.0.0.1:5555/callback'
dex_baseurl = 'https://127.0.0.1:5554'
client_id = 'example-app'
client_secret = 'ZXhhbXBsZS1hcHAtc2VjcmV0'

# Requests authentication form provided by dex.
# Path and parameters need to be scrapped from "action" attribute of form tag.

params = {
    'client_id': 'example-app',
    'redirect_uri': redirect_uri,
    'response_type': 'code',
    'scope': 'groups openid email',
    }
resp = requests.get(urljoin(dex_baseurl, '/dex/auth'), params=params,
                    verify=False)
soup = BeautifulSoup(resp.text, 'html.parser')
login_form_action = urljoin(dex_baseurl, soup.form['action'])

# Sends credentials to authenticate against LDAP through dex.
data = {'login': username, 'password': password}
resp = requests.post(login_form_action, data=data,
                     allow_redirects=False, verify=False)

# Emulates redirection with code autogenerated in dex.
# Response received after redirection is subsequent redirection to callback endpoint.
# It contains authorization code in query string. We scrap it.
resp = requests.get(urljoin(dex_baseurl, resp.headers['Location']),
                    allow_redirects=False, verify=False)
query = urlparse(resp.headers['Location']).query
auth_code = parse_qs(query)['code'][0]

print('Authorization code: ', auth_code)

# Exchanges id_token with authorization code.

oauth = OAuth2Session(client_id, redirect_uri=redirect_uri)
token = oauth.fetch_token(urljoin(dex_baseurl, '/dex/token'),
                          code=auth_code, verify=False,
                          client_secret=client_secret)
print(token['id_token'])

