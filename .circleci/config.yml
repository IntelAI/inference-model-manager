version: 2.0
jobs:
  style_and_unit_tests:
    docker:
      - image: circleci/python:3.6.6-jessie-browsers
    working_directory: ~/inferno-platform
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Create venv
          command: |
            cd ~/inferno-platform/
            python3 -m venv .venv
      - run:
          name: Style checker
          command: |
            . ~/inferno-platform/.venv/bin/activate
            pip install -q flake8==3.5.0
            echo "management folder" && cd ~/inferno-platform/management/ && make style
            echo "tests folder && " && cd ~/inferno-platform/tests/ && make style
            echo "scripts folder" && cd ~/inferno-platform/scripts/ && flake8 --max-line-length 100
      - run:
          name: Run unit tests
          command: |
            . ~/inferno-platform/.venv/bin/activate
            cd ~/inferno-platform/management/ && python setup.py test
  functional_tests:
    docker:
      - image: circleci/python:3.6.6-jessie-browsers
    working_directory: ~/inferno-platform
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Create venv
          command: |
            cd ~/inferno-platform/
            python3 -m venv .venv
      - run:
          name: Choose region
          command: |
            cd ~/inferno-platform/kops
            export BRANCH=$(git symbolic-ref --short HEAD)
            echo $REGION_JSON
            if [ "$BRANCH" != "master" ]
            then
               sudo apt-get install jq
               export GCE_REGION=`jq --arg namearg "$CIRCLE_USERNAME" '.[$namearg]' <<< "$REGION_JSON" | tr -d '"'`
               if [ "GCE_REGION" != "null" ]
               then
                 sed -i "s/us-west1/${GCE_REGION}/g" desiredcni.yaml
               fi
            fi
      - run:
          name: Prepare environment variables
          command: |
            echo 'export PR_NR=`basename ${CIRCLE_PULL_REQUEST}`' >> $BASH_ENV
            echo 'export KOPS_FEATURE_FLAGS=AlphaAllowGCE' >> $BASH_ENV
            echo 'export PR_NR=`basename ${CIRCLE_PULL_REQUEST}`' >> $BASH_ENV
            echo 'export SHORT_SHA1=`echo ${CIRCLE_SHA1} | cut -c 1-6`' >> $BASH_ENV
            echo 'export CLUSTER_NAME="inferno-${SHORT_SHA1}-${CIRCLE_BRANCH}.k8s.local"' >> $BASH_ENV
            echo 'export CLUSTER_NAME_SHORT="inferno-${SHORT_SHA1}-${CIRCLE_BRANCH}"' >> $BASH_ENV
            echo 'export KOPS_STATE_STORE=gs://kubernetes-clusters-inferno' >> $BASH_ENV
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp-key.json"' >> $BASH_ENV
            echo 'export CLUSTER_NAME_SHORT_TP=`echo ${CLUSTER_NAME_SHORT} | cut -c 1-20`' >> $BASH_ENV
            echo 'export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"' >> $BASH_ENV
            echo 'export DOMAIN_NAME="dex.${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com"' >> $BASH_ENV
            echo 'export ISSUER="https://dex.${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com:443/dex"' >> $BASH_ENV
      - run:
          name: Generate certificates
          command: |
            cd ~/inferno-platform/helm-deployment/charts/management-api-subchart/certs
            ./management_api_certs.sh
            ./internal_ing_man_api_certs.sh
            cd ~/inferno-platform/helm-deployment/charts/dex-subchart/certs
            ./internal_ing_dex_certs.sh
            ./generate-dex-certs.sh
            cd ~/inferno-platform/helm-deployment/certs
            ./scriptcert.sh
            ./script-wrong-certs.sh
      - run:
          name: Create k8s cluster
          command: |
            echo "${GOOGLE_INFERNO_KEY}" | base64 -d > /tmp/gcp-key.json
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            sudo apt-get install kubectl
            sudo apt-get update && sudo apt-get --only-upgrade install kubectl google-cloud-sdk google-cloud-sdk-app-engine-grpc google-cloud-sdk-pubsub-emulator \
            google-cloud-sdk-app-engine-go google-cloud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-app-engine-python google-cloud-sdk-cbt \
            google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java
            gcloud auth activate-service-account --key-file /tmp/gcp-key.json
            gcloud config set project "${GOOGLE_PROJECT_ID}"
            mkdir temp
            cd temp
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64

            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/
            export PROJECT=`gcloud config get-value project`
            cd ~/inferno-platform/kops
            
            sed -i "s/toreplacebyclustername/${CLUSTER_NAME_SHORT}/g" desiredcni.yaml
            cp ~/inferno-platform/helm-deployment/charts/dex-subchart/certs/dex-ca.crt .
            sed -i 's/^/      /' dex-ca.crt
            sed -i -e '/replace_by_certificate/{r dex-ca.crt' -e 'd}' desiredcni.yaml
            kops create -f desiredcni.yaml
            kops update cluster ${CLUSTER_NAME} --yes
            sleep 300
            kubectl create -f https://git.io/weave-kube-1.6
            
            sleep 250            
            kubectl create serviceaccount --namespace kube-system tiller
            kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
            chmod 700 get_helm.sh
            sleep 150
            ./get_helm.sh
            helm init --service-account tiller --upgrade
            sleep 20
      - run:
          name: Check management api images version
          command: |
            cd ~/inferno-platform/
            export TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export TAG_EXISTS=$(gcloud container images list-tags gcr.io/constant-cubist-173123/management-api | grep $TAG)
            echo $TAG
            echo $TAG_EXISTS
            cd ~/inferno-platform/management
            if [ -z "$TAG_EXISTS" ]; then
               make circleci
            else
               echo "image already in registry - not rebuilding"
            fi
      - run:
          name: Check CRD controller image version
          command: |
            cd ~/inferno-platform
            export TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export TAG_EXISTS=$(gcloud container images list-tags gcr.io/constant-cubist-173123/server-controller-prod | grep $TAG)
            echo $TAG
            echo $TAG_EXISTS
            cd ~/inferno-platform/server-controller/
            if [ -z "$TAG_EXISTS" ]; then
               printf "machine github.com\n        login $GITHUB_LOGIN\n        password $GITHUB_TOKEN\n" > .netrc
               make circleci
               git checkout -- .netrc
            else
               echo "image already in registry - not rebuilding"
            fi
      - run:
          name: Download dependencies and deploy platfrom
          command: |
            export MGMT_TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export CTRL_TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            cd ~/inferno-platform/helm-deployment/charts/dex-subchart
            sed -i "s@toreplacedbyissuer@${ISSUER}@g" values.yaml
            cd ~/inferno-platform/helm-deployment/
            helm dep up .
            helm install --name inferno --set management-api-chart.tag=$MGMT_TAG --set crd-subchart.tag=$CTRL_TAG --set dex-subchart.issuer=${ISSUER} --set dex-subchart.config.issuer=${ISSUER} --set dex-subchart.ingress.hosts=${DOMAIN_NAME} --set dex-subchart.ingress.tls.hosts=${DOMAIN_NAME} .
            sleep 150
      - run:
          name: Create record in AWS Route53
          command: |    
            cd ~/inferno-platform/kops/
            while [ -z $ING_IP ]; do sleep 10; ING_IP=$(kubectl get ing -o=jsonpath='{.items[0].status.loadBalancer.ingress..ip}'); done
                  
            sed -i "s/0.0.0.0/${ING_IP}/g" route_record.json
            sed -i "s/toreplacebydomainname/${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com/g" route_record.json
            cat route_record.json
            # to uncomment after enabling support for openid tokens
            # aws route53 change-resource-record-sets --hosted-zone-id Z11DOV0M5AJEBB --change-batch file://./route_record.json
            # sleep 150
      - run:
          name: Install Certificates
          command: |
            sudo cp ~/inferno-platform/helm-deployment/charts/management-api-subchart/certs/ca-man-api.crt /usr/local/share/ca-certificates/ca-man-api.crt
            sudo cp ~/inferno-platform/helm-deployment/charts/dex-subchart/certs/dex-ca.crt /usr/local/share/ca-certificates/dex-ca.crt
            sudo update-ca-certificates
            # Commands below are necessary to enable developers debug their builds
            echo "MANAGEMENT API CA"
            cat ~/inferno-platform/helm-deployment/charts/management-api-subchart/certs/ca-man-api.crt
            echo "DEX CA"
            cat ~/inferno-platform/helm-deployment/charts/dex-subchart/certs/dex-ca.crt
      - run:
          name: Run tests
          command: |
            . ~/inferno-platform/.venv/bin/activate
            cd ~/inferno-platform/helm-deployment/certs
            export CERT=`cat ca-cert-tf.crt | base64 -w0`
            while [ -z $ING_IP ]; do sleep 10; ING_IP=$(kubectl get ing -o=jsonpath='{.items[0].status.loadBalancer.ingress..ip}'); done
            export ING_DOMAIN=`kubectl get ing -o=jsonpath='{.items..spec.tls..hosts}' | sed 's/[][]//g'`
            export MANAGEMENT_IP=`kubectl get svc -l "run=management-api" -o "jsonpath={$.items[0].status.loadBalancer.ingress[0].ip}"`
            echo "${ING_IP} ${ING_DOMAIN}" | sudo tee -a /etc/hosts
            echo "${MANAGEMENT_IP} management-api.aipg.com" | sudo tee -a /etc/hosts
            export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
            cd ~/inferno-platform/tests
            pip install -q -r requirements.txt
            . run_test.sh
      - run:
          name: Set images tags to latest on master
          command: |
            export BRANCH=$(git symbolic-ref --short HEAD)
            if [ "$BRANCH" == "master" ]; then
               MGMT_TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
               CTRL_TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
               gcloud container images add-tag gcr.io/constant-cubist-173123/management-api:$MGMT_TAG gcr.io/constant-cubist-173123/management-api:latest
               gcloud container images add-tag gcr.io/constant-cubist-173123/server-controller-prod:$CTRL_TAG gcr.io/constant-cubist-173123/server-controller-prod:latest
            fi
      - run:
          name: clean after success
          when: on_success
          command: |
            export PROJECT=`gcloud config get-value project`
            export ING_IP=$(kubectl get ing -o=jsonpath='{.items[0].status.loadBalancer.ingress..ip}')
            helm --debug delete inferno
            sleep 2m
            kops delete cluster ${CLUSTER_NAME} --yes
            cd ~/inferno-platform/kops
            sed -i "s/0.0.0.0/${ING_IP}/g" route_delete.json
            sed -i "s/toreplacebydomainname/${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com/g" route_delete.json
            cat route_delete.json
            # aws route53 change-resource-record-sets --hosted-zone-id Z11DOV0M5AJEBB --change-batch file://./route_delete.json
      - run:
          name: clean after failure
          when: on_fail
          command: |
            export PROJECT=`gcloud config get-value project`
            export ING_IP=$(kubectl get ing -o=jsonpath='{.items[0].status.loadBalancer.ingress..ip}')
            sleep 30m
            helm --debug delete inferno
            sleep 2m 
            kops delete cluster ${CLUSTER_NAME} --yes
            cd ~/inferno-platform/kops
            sed -i "s/0.0.0.0/${ING_IP}/g" route_delete.json
            sed -i "s/toreplacebydomainname/${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com/g" route_delete.json
            cat route_delete.json
            # aws route53 change-resource-record-sets --hosted-zone-id Z11DOV0M5AJEBB --change-batch file://./route_delete.json
          no_output_timeout: 32m
workflows:
  version: 2
  deploy-test:
    jobs:
      - style_and_unit_tests
      - functional_tests
